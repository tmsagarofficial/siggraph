// Start function that ties everything together
function startProcess(includeColumns) {
    Logger.log("=== Starting Process with Configuration ===");

    var includeColumns = {
        "Timestamp": !true,
        "Email Address": !true,
        "Full Name As Per College Documents": true,
        "personal email id": !true,
        "college email id": !true,
        "Semester": !true,
        "Phone Number (without +91)": !true,
        "USN": !true,
        "Branch": !true,
        "Were you a member of Siggraph BNMIT previously?": !true,
        "UPI Transaction ID": !true,
        "Payment Screenshot": !true,
        "Remarks: (Optional)": !true,
        "Note?": !true,
        "Payments?": !true,
        "Verified?": !true,
    };

    Logger.log("Included Columns Configuration:");
    Object.keys(includeColumns).forEach(key => {
        Logger.log(key + ": " + includeColumns[key]);
    });

    Logger.log("\n=== Starting Data Pipeline ===");
    fetchDataAndPopulate();
    filterYearWiseIntoSheets();
    createFinalSheet(SpreadsheetApp.getActiveSpreadsheet(), includeColumns);
    Logger.log("=== Process completed successfully! ===");
}

// Function to create a unique hash for a student (email only)
// Function to create a unique MD5 hash for a student (email only)
function createStudentHash(collegeEmail) {
    if (!collegeEmail) {
        Logger.log("WARNING: Attempt to create hash with empty email");
        return null;
    }

    const emailHash = collegeEmail.toString().toLowerCase().trim();
    if (emailHash.length === 0) {
        Logger.log("WARNING: Email hash creation failed - empty after trimming");
        return null;
    }

    // Generate MD5 hash using Utilities.computeDigest
    const rawHash = Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, emailHash);
    const md5Hash = rawHash.map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0')).join('');

    Logger.log("Created MD5 hash for email: " + collegeEmail + " -> " + md5Hash);
    return md5Hash;
}


// Function to fetch data and populate the 'IMPORT' sheet
function fetchDataAndPopulate() {
    Logger.log("\n=== Starting Data Import Process ===");

    var sourceSpreadsheetUrl = "https://docs.google.com/spreadsheets/d/1YJO2_haprhq7VEPRPPEsrOVuQMehNaLypAKSyovSrCE/";
    var sourceSheetName = "Form Responses 1";
    var targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();

    Logger.log("Attempting to open source spreadsheet: " + sourceSpreadsheetUrl);
    var sourceSpreadsheet = SpreadsheetApp.openByUrl(sourceSpreadsheetUrl);
    var sourceSheet = sourceSpreadsheet.getSheetByName(sourceSheetName);

    if (!sourceSheet) {
        Logger.log("ERROR: Source sheet not found: " + sourceSheetName);
        return;
    }

    Logger.log("Successfully opened source sheet. Fetching data...");
    var sourceData = sourceSheet.getDataRange().getValues();
    if (!sourceData || sourceData.length === 0) {
        Logger.log("ERROR: No data found in source sheet");
        return;
    }

    var headers = sourceData[0];
    var dataRows = sourceData.slice(1);

    Logger.log("Retrieved " + dataRows.length + " rows of data (excluding headers)");
    Logger.log("Headers found: " + headers.join(", "));

    var verifiedColumnIndex = headers.indexOf("Verified?");
    var filteredData = dataRows.filter(row => row[verifiedColumnIndex] == "âœ…");

    Logger.log("Filtered to " + filteredData.length + " verified entries");
    if (filteredData.length === 0) {
        Logger.log("WARNING: No verified data found");
        return;
    }

    var main1Sheet = targetSpreadsheet.getSheetByName("IMPORT");
    if (!main1Sheet) {
        Logger.log("ERROR: IMPORT sheet not found");
        return;
    }

    Logger.log("Writing data to IMPORT sheet...");
    main1Sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    main1Sheet.getRange(2, 1, filteredData.length, filteredData[0].length).setValues(filteredData);
    Logger.log("IMPORT sheet successfully populated");
}


function filterYearWiseIntoSheets() {
    Logger.log("\n=== Starting Year-wise Data Distribution ===");

    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var mainSheet = ss.getSheetByName("IMPORT");
    if (!mainSheet) {
        Logger.log("ERROR: IMPORT sheet not found");
        return;
    }

    var data = mainSheet.getDataRange().getValues();
    if (data.length < 2) {
        Logger.log("No data available in IMPORT sheet");
        return;
    }

    var headers = data[0]; // Extract headers
    var rows = data.slice(1); // Extract data rows

    // Add SIG-ID and Email Hash to the beginning of the headers
    var newHeaders = ["SIG-ID", "Email Hash"].concat(headers);

    // Indexes for important fields
    var semesterIndex = headers.indexOf("Semester");
    var emailIndex = headers.indexOf("college email id");

    if (semesterIndex === -1 || emailIndex === -1) {
        Logger.log("ERROR: Required columns (Semester, college email id) not found");
        return;
    }

    // Prepare year-wise sheets
    var sheets = {
        "Sheet1": { prefix: "24SIG", data: [] },
        "Sheet2": { prefix: "23SIG", data: [] },
        "Sheet3": { prefix: "22SIG", data: [] },
        "Sheet4": { prefix: "21SIG", data: [] }
    };

    var counters = { "24SIG": 100, "23SIG": 100, "22SIG": 100, "21SIG": 100 };
    var processedHashes = {}; // To track duplicates
    var duplicateCount = 0; // Track duplicates
    var uniqueCount = 0; // Track unique entries

    // Process rows
    rows.forEach(row => {
        var semester = row[semesterIndex];
        var email = row[emailIndex];

        if (!semester || !email) return; // Skip rows with missing data

        var emailHash = createStudentHash(email.trim());
        if (processedHashes[emailHash]) {
            Logger.log("Duplicate found, skipping row for email: " + email);
            duplicateCount++; // Increment duplicate counter
            return;
        }

        processedHashes[emailHash] = true; // Mark hash as processed
        var sigId = null;

        switch (semester) {
            case "1st":
                sigId = sheets["Sheet1"].prefix + (++counters["24SIG"]);
                sheets["Sheet1"].data.push([sigId, emailHash].concat(row));
                break;
            case "3rd":
                sigId = sheets["Sheet2"].prefix + (++counters["23SIG"]);
                sheets["Sheet2"].data.push([sigId, emailHash].concat(row));
                break;
            case "5th":
                sigId = sheets["Sheet3"].prefix + (++counters["22SIG"]);
                sheets["Sheet3"].data.push([sigId, emailHash].concat(row));
                break;
            case "7th":
                sigId = sheets["Sheet4"].prefix + (++counters["21SIG"]);
                sheets["Sheet4"].data.push([sigId, emailHash].concat(row));
                break;
            default:
                Logger.log("Unknown semester: " + semester);
        }
        uniqueCount++; // Increment unique counter
    });

    // Write to year-wise sheets without clearing
    for (var sheetName in sheets) {
        var sheet = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);

        // Get the existing data in the sheet
        var existingData = sheet.getDataRange().getValues();
        var existingHashes = {};
        // Skip header row and create a map of existing hashes
        if (existingData.length > 1) {
            existingData.slice(1).forEach(row => {
                var existingHash = row[1]; // The hash is in the second column (index 1)
                if (existingHash) {
                    existingHashes[existingHash] = true;
                }
            });
        }

        // Ensure headers are written only once, if sheet is empty
        if (sheet.getLastRow() === 0) {
            sheet.appendRow(newHeaders); // Add updated headers if sheet is empty
        }

        // Filter out data that already exists in the sheet based on email hash
        var newData = sheets[sheetName].data.filter(row => !existingHashes[row[1]]); // row[1] is the email hash

        if (newData.length > 0) {
            // Append new data to the sheet
            sheet.getRange(sheet.getLastRow() + 1, 1, newData.length, newHeaders.length)
                .setValues(newData);
        } else {
            Logger.log("No new unique data to append to " + sheetName);
        }
    }

    Logger.log("Year-wise data distribution completed with updated headers");
    Logger.log("Total Duplicates Found: " + duplicateCount);
    Logger.log("Total Unique IDs Assigned: " + uniqueCount);
}


// Helper function to create hash map of existing data
function createExistingDataMap(spreadsheet, sheetName, emailIndex) {
    Logger.log("Creating hash map for " + sheetName + "...");
    var sheet = spreadsheet.getSheetByName(sheetName);
    var map = {};

    if (sheet) {
        var data = sheet.getDataRange().getValues();
        if (data.length > 1) {
            data.slice(1).forEach(row => {
                var hash = row[emailIndex];
                if (hash) {
                    map[hash] = true;
                }
            });
        }
    }

    Logger.log(sheetName + " map created with " + Object.keys(map).length + " entries");
    return map;
}

// Helper function to append data to a sheet
function appendToSheet(spreadsheet, sheetName, headers, data) {
    var sheet = spreadsheet.getSheetByName(sheetName);
    if (!sheet) {
        sheet = spreadsheet.insertSheet(sheetName);
        sheet.appendRow(headers);
    }
    sheet.getRange(sheet.getLastRow() + 1, 1, data.length, data[0].length).setValues(data);
    Logger.log("Appended " + data.length + " rows to " + sheetName);
}

// Helper function to get the highest counter for a given sheet
function getHighestCounter(existingDataMap, prefix) {
    var maxCounter = 100;
    Object.keys(existingDataMap).forEach(email => {
        if (email.startsWith(prefix)) {
            var counter = parseInt(email.slice(prefix.length));
            if (counter > maxCounter) {
                maxCounter = counter;
            }
        }
    });
    return maxCounter;
}


function createFinalSheet(spreadsheet, includeColumns) {
    Logger.log("\n=== Creating FinalSheet ===");

    var finalSheet = spreadsheet.getSheetByName("FinalSheet");
    if (!finalSheet) {
        Logger.log("FinalSheet not found, creating a new one...");
        finalSheet = spreadsheet.insertSheet("FinalSheet");
    } else {
        Logger.log("Clearing existing data in FinalSheet...");
        finalSheet.clear(); // Clear previous data
    }

    // Headers: SIG-ID followed by Main Sheet headers (filtered by includeColumns)
    var headers = ["SIG-ID"].concat(Object.keys(includeColumns).filter(key => includeColumns[key]));

    finalSheet.appendRow(headers); // Write headers to FinalSheet

    var allData = [];
    ["Sheet1", "Sheet2", "Sheet3", "Sheet4"].forEach(sheetName => {
        var sheet = spreadsheet.getSheetByName(sheetName);
        if (sheet) {
            var data = sheet.getDataRange().getValues();
            if (data.length > 1) {
                var headerMap = {};
                data[0].forEach((col, i) => { headerMap[col] = i; });

                allData = allData.concat(
                    data.slice(1).map(row => {
                        return headers.map(header => {
                            if (header === "SIG-ID") return row[headerMap[header]];
                            return row[headerMap[header]] || "";
                        });
                    })
                );
            }
        }
    });

    if (allData.length > 0) {
        finalSheet.getRange(finalSheet.getLastRow() + 1, 1, allData.length, allData[0].length).setValues(allData);
    } else {
        Logger.log("No new data to append to FinalSheet");
    }

    Logger.log("=== FinalSheet Creation Completed ===");
}



